{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.base_Url = 'http://localhost:3000/api/v1/';\n  }\n  signup(data) {\n    return this.http.post(this.base_Url + 'patient', data);\n  }\n  login(data) {\n    console.log(data);\n    return this.http.post(this.base_Url + 'patient/login', data);\n  }\n  doctorSignup(data) {\n    return this.http.post(this.base_Url + 'doctor', data);\n  }\n  doctorLogin(data) {\n    return this.http.post(this.base_Url + 'doctor/login', data);\n  }\n  getPatientsData() {\n    // Retrieve token from local storage\n    const token = localStorage.getItem('token');\n    // Set token in the request headers\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + token);\n    // Send the HTTP request with the headers\n    return this.http.get(this.base_Url + 'patient', {\n      headers\n    });\n  }\n  getPatientsPrescription() {\n    // Retrieve token from local storage\n    const token = localStorage.getItem('token');\n    // Set token in the request headers\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + token);\n    // Send the HTTP request with the headers\n    return this.http.get(this.base_Url + 'prescription', {\n      headers\n    });\n  }\n  getMedicalRecords() {\n    // Retrieve token from local storage\n    const token = localStorage.getItem('token');\n    // Set token in the request headers\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + token);\n    // Send the HTTP request with the headers\n    return this.http.get(this.base_Url + 'medicalRecord', {\n      headers\n    });\n  }\n  // ------------------------------\n  getAlldoctors() {\n    return this.http.get(this.base_Url + 'doctor');\n  }\n  getAllMedicalRecords() {\n    return this.http.get(this.base_Url + 'medicalRecord');\n  }\n  getAllBillings() {\n    return this.http.get(this.base_Url + 'billing');\n  }\n  createBilling(data) {\n    return this.http.post(this.base_Url + 'billing', data);\n  }\n  getAllNurses() {\n    return this.http.get(this.base_Url + 'nurse');\n  }\n  createNurse(data) {\n    return this.http.post(this.base_Url + 'nurse', data);\n  }\n  getAllAppointment() {\n    return this.http.get(this.base_Url + 'appointment');\n  }\n  createAppointment(data) {\n    return this.http.post(this.base_Url + 'appointment', data);\n  }\n  getAppointment(id) {\n    return this.http.get(this.base_Url + `appointment/patient/${id}`);\n  }\n  getprescriptionById(id) {\n    return this.http.get(this.base_Url + `prescription/patientId/${id}`);\n  }\n  getBillById(id) {\n    return this.http.get(this.base_Url + `billing/patientId/${id}`);\n  }\n  paybill(data) {\n    return this.http.post(this.base_Url + 'payment', data);\n  }\n  getAdminStaff() {\n    return this.http.get(this.base_Url + 'admin');\n  }\n  getAppointmentByDoctorId(id) {\n    return this.http.get(this.base_Url + `appointment/doctorId/${id}`);\n  }\n  getPatientLabResultsById(id) {\n    return this.http.get(this.base_Url + `testResult/test-result/patient/${id}`);\n  }\n  getPatientLabResultsByDoctorId(id) {\n    return this.http.get(this.base_Url + `testResult/test-result/doctor/${id}`);\n  }\n  getSurgeryDetailsByPatientId(id) {\n    return this.http.get(this.base_Url + `surgery/patient/${id}`);\n  }\n  getSurgeryDetailsByDoctorId(id) {\n    return this.http.get(this.base_Url + `surgery/doctor/${id}`);\n  }\n  getallSurgeryDetails() {\n    return this.http.get(this.base_Url + 'surgery');\n  }\n  getalltestresults() {\n    return this.http.get(this.base_Url + 'testResult');\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","AuthService","constructor","http","base_Url","signup","data","post","login","console","log","doctorSignup","doctorLogin","getPatientsData","token","localStorage","getItem","headers","set","get","getPatientsPrescription","getMedicalRecords","getAlldoctors","getAllMedicalRecords","getAllBillings","createBilling","getAllNurses","createNurse","getAllAppointment","createAppointment","getAppointment","id","getprescriptionById","getBillById","paybill","getAdminStaff","getAppointmentByDoctorId","getPatientLabResultsById","getPatientLabResultsByDoctorId","getSurgeryDetailsByPatientId","getSurgeryDetailsByDoctorId","getallSurgeryDetails","getalltestresults","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\nandi\\OneDrive\\Desktop\\New folder (2)\\HMSFE\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, retry } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  base_Url = 'http://localhost:3000/api/v1/'\r\n\r\n  signup(data: any):Observable<any>{\r\n    return this.http.post(this.base_Url+ 'patient', data)\r\n  }\r\n\r\n  login(data: any): Observable<any>{\r\n    console.log(data);\r\n\r\n    return this.http.post(this.base_Url+ 'patient/login', data)\r\n  }\r\n\r\n  doctorSignup(data: any):Observable<any>{\r\n    return this.http.post(this.base_Url+ 'doctor', data)\r\n  }\r\n\r\n  doctorLogin(data: any): Observable<any>{\r\n    return this.http.post(this.base_Url+ 'doctor/login', data)\r\n  }\r\n\r\n  getPatientsData(): Observable<any> {\r\n    // Retrieve token from local storage\r\n    const token = localStorage.getItem('token');\r\n\r\n    // Set token in the request headers\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + token);\r\n\r\n    // Send the HTTP request with the headers\r\n    return this.http.get(this.base_Url + 'patient', { headers });\r\n  }\r\n\r\n  getPatientsPrescription(): Observable<any> {\r\n    // Retrieve token from local storage\r\n    const token = localStorage.getItem('token');\r\n\r\n    // Set token in the request headers\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + token);\r\n\r\n    // Send the HTTP request with the headers\r\n    return this.http.get(this.base_Url + 'prescription', { headers });\r\n  }\r\n  getMedicalRecords(): Observable<any> {\r\n    // Retrieve token from local storage\r\n    const token = localStorage.getItem('token');\r\n\r\n    // Set token in the request headers\r\n    const headers = new HttpHeaders().set('Authorization', 'Bearer ' + token);\r\n\r\n    // Send the HTTP request with the headers\r\n    return this.http.get(this.base_Url + 'medicalRecord', { headers });\r\n  }\r\n// ------------------------------\r\n  getAlldoctors(): Observable<any>{\r\n    return this.http.get(this.base_Url + 'doctor')\r\n  }\r\n\r\n  getAllMedicalRecords(): Observable<any>{\r\n    return this.http.get(this.base_Url + 'medicalRecord')\r\n  }\r\n\r\n  getAllBillings(): Observable<any>{\r\n    return this.http.get(this.base_Url + 'billing')\r\n  }\r\n  createBilling(data: any): Observable<any>{\r\n    return this.http.post(this.base_Url + 'billing', data)\r\n  }\r\n\r\n\r\n  getAllNurses():Observable<any>{\r\n    return this.http.get(this.base_Url + 'nurse')\r\n  }\r\n\r\n  createNurse(data: any):Observable <any>{\r\n    return this.http.post(this.base_Url + 'nurse', data)\r\n  }\r\n\r\n  getAllAppointment():Observable<any>{\r\n    return this.http.get(this.base_Url + 'appointment')\r\n  }\r\n\r\n  createAppointment(data: any):Observable<any>{\r\n    return this.http.post(this.base_Url + 'appointment', data)\r\n  }\r\n\r\n\r\n  getAppointment(id: any): Observable<any> {\r\n    return this.http.get(this.base_Url + `appointment/patient/${id}`);\r\n  }\r\n\r\n  getprescriptionById(id: any): Observable<any> {\r\n    return this.http.get(this.base_Url + `prescription/patientId/${id}`);\r\n  }\r\n\r\n  getBillById(id: any): Observable<any> {\r\n    return this.http.get(this.base_Url + `billing/patientId/${id}`);\r\n  }\r\n\r\n  paybill(data: any):Observable<any>{\r\n    return this.http.post(this.base_Url+'payment', data)\r\n  }\r\n\r\n  getAdminStaff():Observable<any>{\r\n    return this.http.get(this.base_Url + 'admin')\r\n  }\r\n\r\n  getAppointmentByDoctorId(id: any):Observable<any>{\r\n    return this.http.get(this.base_Url + `appointment/doctorId/${id}`)\r\n  }\r\n\r\n  getPatientLabResultsById(id: any):Observable<any>{\r\n    return this.http.get(this.base_Url + `testResult/test-result/patient/${id}`)\r\n  }\r\n\r\n  getPatientLabResultsByDoctorId(id: any):Observable<any>{\r\n    return this.http.get(this.base_Url + `testResult/test-result/doctor/${id}`)\r\n  }\r\n\r\n  getSurgeryDetailsByPatientId(id: any):Observable<any>{\r\n    return this.http.get(this.base_Url + `surgery/patient/${id}`)\r\n  }\r\n\r\n  getSurgeryDetailsByDoctorId(id: any):Observable<any>{\r\n    return this.http.get(this.base_Url + `surgery/doctor/${id}`)\r\n  }\r\n\r\n  getallSurgeryDetails():Observable<any>{\r\n    return this.http.get(this.base_Url + 'surgery')\r\n  }\r\n\r\n  getalltestresults():Observable<any>{\r\n    return this.http.get(this.base_Url + 'testResult')\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}